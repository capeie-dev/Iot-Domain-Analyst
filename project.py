# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PvL4MjEppJqGH97djceoPkUJ08iPBiCB
"""

import os
import zipfile
import random
import shutil
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from shutil import copyfile
from os import getcwd
from os import listdir
import cv2
from tensorflow.keras.layers import Conv2D, Input, ZeroPadding2D, BatchNormalization, Activation, MaxPooling2D, Flatten, Dense
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.utils import shuffle
import imutils
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image  as mpimg
from tensorflow import keras


def img_preprocess(img):
  img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
  img = cv2.resize(img,(150,150))
  img = img/255
  return img
model = keras.models.load_model('facemask.h5')
classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)
labels_dict={0:'mask',1:'nomask'}
while(True):
  ret,img = cap.read()
  test = img
  size = 4
  new = img
  mini = cv2.resize(img, (img.shape[1] // size, img.shape[0] // size))

  faces = classifier.detectMultiScale(mini)
  try:
    for f in faces:
      (x, y, w, h) = [v * size for v in f] #Scale the shapesize backup
      #Save just the rectangle faces in SubRecFaces
      face_img = img[y:y+h, x:x+w]
      resized=cv2.resize(face_img,(150,150))
      new = resized
      img = img_preprocess(resized)
      img = img_preprocess(new)
      img = np.expand_dims(img, axis=0)
      out = model.predict(img)
      out = out[0]
      out = out.tolist()
      maxpos = out.index(max(out))
      print(labels_dict[maxpos])
      if maxpos == 0:
        cv2.rectangle(test,(x,y),(x+w,y+h),(0,255,0),2)
      elif maxpos == 1:
        cv2.rectangle(test,(x,y),(x+w,y+h),(0,0,255),2)

    

    
    
  except:
    pass

  cv2.imshow('frame',test)
  if cv2.waitKey(1) & 0xFF == ord('q'):
    break

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()

